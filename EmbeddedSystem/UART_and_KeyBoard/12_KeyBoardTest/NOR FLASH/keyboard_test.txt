; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 942] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o".\NOR FLASH\keyboard_test.o" --depend=".\NOR FLASH\keyboard_test.d" --device=DARMSS9 --apcs=interwork -O0 -I..\Common\Inc -I.\Include -I"D:\Program Files\Keil\ARM\INC\Samsung" --omf_browse=".\NOR FLASH\keyboard_test.crf" keyboard_test.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  keyboard_int PROC
;;;97     void __irq keyboard_int(void)
;;;98     {
000000  e92d0003          PUSH     {r0,r1}
;;;99         ClearPending(BIT_EINT1);
000004  e3a00002          MOV      r0,#2
000008  e3a0144a          MOV      r1,#0x4a000000
00000c  e5810000          STR      r0,[r1,#0]
000010  e3a0044a          MOV      r0,#0x4a000000
000014  e5900010          LDR      r0,[r0,#0x10]
000018  e5810010          STR      r0,[r1,#0x10]
;;;100        g_nKeyPress = 1;
00001c  e3a00001          MOV      r0,#1
000020  e59f1280          LDR      r1,|L1.680|
000024  e5810000          STR      r0,[r1,#0]  ; g_nKeyPress
;;;101    }
000028  e8bd0003          POP      {r0,r1}
00002c  e25ef004          SUBS     pc,lr,#4
;;;102    /*********************************************************************************************
                          ENDP

                  keyboard_init PROC
;;;36     void keyboard_init(void)
;;;37     {
000030  e92d4010          PUSH     {r4,lr}
;;;38     	int i;
;;;39     	iic_init_8led();	
000034  ebfffffe          BL       iic_init_8led
;;;40     	for(i=0; i<8; i++)
000038  e3a04000          MOV      r4,#0
00003c  ea000006          B        |L1.92|
                  |L1.64|
;;;41     	{
;;;42     		iic_write_keybd(0x70, 0x10+i, 0xFF);						// write data to DpRam0~DpRam7(Register of ZLG7290)
000040  e2841010          ADD      r1,r4,#0x10
000044  e3a020ff          MOV      r2,#0xff
000048  e3a00070          MOV      r0,#0x70
00004c  ebfffffe          BL       iic_write_keybd
;;;43     		delay(5);
000050  e3a00005          MOV      r0,#5
000054  ebfffffe          BL       delay
000058  e2844001          ADD      r4,r4,#1              ;40
                  |L1.92|
00005c  e3540008          CMP      r4,#8                 ;40
000060  bafffff6          BLT      |L1.64|
;;;44     	}                        
;;;45     
;;;46     	iic_init_keybd();												// enable IIC and EINT1 int
000064  ebfffffe          BL       iic_init_keybd
;;;47         pISR_EINT1 = (int)keyboard_int;
000068  e24f0070          ADR      r0,keyboard_int
00006c  e59f1238          LDR      r1,|L1.684|
000070  e5810f24          STR      r0,[r1,#0xf24]
;;;48     }
000074  e8bd4010          POP      {r4,lr}
000078  e12fff1e          BX       lr
;;;49     
                          ENDP

                  key_set PROC
;;;111    {
;;;112    	switch(ucChar)
00007c  e350001e          CMP      r0,#0x1e
000080  308ff100          ADDCC    pc,pc,r0,LSL #2
000084  ea000044          B        |L1.412|
000088  ea000043          B        |L1.412|
00008c  ea00001b          B        |L1.256|
000090  ea00001c          B        |L1.264|
000094  ea00001c          B        |L1.268|
000098  ea00001c          B        |L1.272|
00009c  ea00001c          B        |L1.276|
0000a0  ea00003d          B        |L1.412|
0000a4  ea00003c          B        |L1.412|
0000a8  ea00003b          B        |L1.412|
0000ac  ea00001b          B        |L1.288|
0000b0  ea00001c          B        |L1.296|
0000b4  ea00001c          B        |L1.300|
0000b8  ea00001c          B        |L1.304|
0000bc  ea00001c          B        |L1.308|
0000c0  ea000035          B        |L1.412|
0000c4  ea000034          B        |L1.412|
0000c8  ea000033          B        |L1.412|
0000cc  ea00001b          B        |L1.320|
0000d0  ea00001c          B        |L1.328|
0000d4  ea00001c          B        |L1.332|
0000d8  ea00001c          B        |L1.336|
0000dc  ea00001c          B        |L1.340|
0000e0  ea00002d          B        |L1.412|
0000e4  ea00002c          B        |L1.412|
0000e8  ea00002b          B        |L1.412|
0000ec  ea00001b          B        |L1.352|
0000f0  ea00001d          B        |L1.364|
0000f4  ea00001f          B        |L1.376|
0000f8  ea000021          B        |L1.388|
0000fc  ea000023          B        |L1.400|
                  |L1.256|
;;;113    	{
;;;114    		case 1:
000100  e1a00000          MOV      r0,r0
;;;115    		case 2:
000104  e1a00000          MOV      r0,r0
                  |L1.264|
;;;116    		case 3:
000108  e1a00000          MOV      r0,r0
                  |L1.268|
;;;117    		case 4:
00010c  e1a00000          MOV      r0,r0
                  |L1.272|
;;;118    		case 5:
000110  e1a00000          MOV      r0,r0
                  |L1.276|
;;;119    				ucChar-=1; break;
000114  e2401001          SUB      r1,r0,#1
000118  e20100ff          AND      r0,r1,#0xff
00011c  ea000021          B        |L1.424|
                  |L1.288|
;;;120    		case 9:
000120  e1a00000          MOV      r0,r0
;;;121    		case 10:
000124  e1a00000          MOV      r0,r0
                  |L1.296|
;;;122    		case 11:
000128  e1a00000          MOV      r0,r0
                  |L1.300|
;;;123    		case 12:
00012c  e1a00000          MOV      r0,r0
                  |L1.304|
;;;124    		case 13:
000130  e1a00000          MOV      r0,r0
                  |L1.308|
;;;125    				ucChar-=4; break;
000134  e2401004          SUB      r1,r0,#4
000138  e20100ff          AND      r0,r1,#0xff
00013c  ea000019          B        |L1.424|
                  |L1.320|
;;;126    		case 17:
000140  e1a00000          MOV      r0,r0
;;;127    		case 18:
000144  e1a00000          MOV      r0,r0
                  |L1.328|
;;;128    		case 19:
000148  e1a00000          MOV      r0,r0
                  |L1.332|
;;;129    		case 20:
00014c  e1a00000          MOV      r0,r0
                  |L1.336|
;;;130    		case 21:
000150  e1a00000          MOV      r0,r0
                  |L1.340|
;;;131    					ucChar-=7; break;
000154  e2401007          SUB      r1,r0,#7
000158  e20100ff          AND      r0,r1,#0xff
00015c  ea000011          B        |L1.424|
                  |L1.352|
;;;132    		case 25: ucChar = 0xF; break;
000160  e1a00000          MOV      r0,r0
000164  e3a0000f          MOV      r0,#0xf
000168  ea00000e          B        |L1.424|
                  |L1.364|
;;;133    		case 26: ucChar = '+'; break;
00016c  e1a00000          MOV      r0,r0
000170  e3a0002b          MOV      r0,#0x2b
000174  ea00000b          B        |L1.424|
                  |L1.376|
;;;134    		case 27: ucChar = '-'; break;
000178  e1a00000          MOV      r0,r0
00017c  e3a0002d          MOV      r0,#0x2d
000180  ea000008          B        |L1.424|
                  |L1.388|
;;;135    		case 28: ucChar = '*'; break;
000184  e1a00000          MOV      r0,r0
000188  e3a0002a          MOV      r0,#0x2a
00018c  ea000005          B        |L1.424|
                  |L1.400|
;;;136    		case 29: ucChar = 0xFF; break;
000190  e1a00000          MOV      r0,r0
000194  e3a000ff          MOV      r0,#0xff
000198  ea000002          B        |L1.424|
                  |L1.412|
;;;137    		default: ucChar = 0;
00019c  e1a00000          MOV      r0,r0
0001a0  e3a00000          MOV      r0,#0
0001a4  e1a00000          MOV      r0,r0                 ;112
                  |L1.424|
0001a8  e1a00000          MOV      r0,r0                 ;119
;;;138    	}
;;;139    	return ucChar;
;;;140    }
0001ac  e12fff1e          BX       lr
                          ENDP

                  keyboard_test PROC
;;;58     void keyboard_test(void)
;;;59     {
0001b0  e92d4008          PUSH     {r3,lr}
;;;60     	UINT8T ucChar;
;;;61     	
;;;62     	uart_printf("\n Keyboard Test Example\n");
0001b4  e28f00f4          ADR      r0,|L1.688|
0001b8  ebfffffe          BL       uart_printf
;;;63     	keyboard_init();
0001bc  ebfffffe          BL       keyboard_init
;;;64     	while(1)
0001c0  ea000037          B        |L1.676|
                  |L1.452|
;;;65     	{  
;;;66     	    while(g_nKeyPress--)
0001c4  ea00002d          B        |L1.640|
                  |L1.456|
;;;67     	    {
;;;68     	   	g_nKeyPress = 0;
0001c8  e3a00000          MOV      r0,#0
0001cc  e59f10d4          LDR      r1,|L1.680|
0001d0  e5810000          STR      r0,[r1,#0]  ; g_nKeyPress
;;;69     		while(g_nKeyPress == 0);
0001d4  e1a00000          MOV      r0,r0
                  |L1.472|
0001d8  e59f00c8          LDR      r0,|L1.680|
0001dc  e5900000          LDR      r0,[r0,#0]  ; g_nKeyPress
0001e0  e3500000          CMP      r0,#0
0001e4  0afffffb          BEQ      |L1.472|
;;;70     		iic_read_keybd(0x70, 0x1, &ucChar);						// get data from Key(register of ZLG7290)
0001e8  e28d2000          ADD      r2,sp,#0
0001ec  e3a01001          MOV      r1,#1
0001f0  e3a00070          MOV      r0,#0x70
0001f4  ebfffffe          BL       iic_read_keybd
;;;71     		if(ucChar != 0)
0001f8  e5dd0000          LDRB     r0,[sp,#0]
0001fc  e3500000          CMP      r0,#0
000200  0a00001e          BEQ      |L1.640|
;;;72     		{
;;;73     			ucChar = key_set(ucChar);			// key map for EduKitII
000204  e5dd0000          LDRB     r0,[sp,#0]
000208  ebfffffe          BL       key_set
00020c  e58d0000          STR      r0,[sp,#0]
;;;74     		    if(ucChar < 10) ucChar += 0x30;
000210  e5dd0000          LDRB     r0,[sp,#0]
000214  e350000a          CMP      r0,#0xa
000218  aa000004          BGE      |L1.560|
00021c  e5dd0000          LDRB     r0,[sp,#0]
000220  e2800030          ADD      r0,r0,#0x30
000224  e20000ff          AND      r0,r0,#0xff
000228  e58d0000          STR      r0,[sp,#0]
00022c  ea000006          B        |L1.588|
                  |L1.560|
;;;75     		    else if(ucChar < 16) ucChar += 0x37;
000230  e5dd0000          LDRB     r0,[sp,#0]
000234  e3500010          CMP      r0,#0x10
000238  aa000003          BGE      |L1.588|
00023c  e5dd0000          LDRB     r0,[sp,#0]
000240  e2800037          ADD      r0,r0,#0x37
000244  e20000ff          AND      r0,r0,#0xff
000248  e58d0000          STR      r0,[sp,#0]
                  |L1.588|
;;;76     		    if(ucChar < 255)
00024c  e5dd0000          LDRB     r0,[sp,#0]
000250  e35000ff          CMP      r0,#0xff
000254  aa000002          BGE      |L1.612|
;;;77     			uart_printf("press key %c\n", ucChar);
000258  e5dd1000          LDRB     r1,[sp,#0]
00025c  e28f0068          ADR      r0,|L1.716|
000260  ebfffffe          BL       uart_printf
                  |L1.612|
;;;78     		    if(ucChar == 0xFF)
000264  e5dd0000          LDRB     r0,[sp,#0]
000268  e35000ff          CMP      r0,#0xff
00026c  1a000003          BNE      |L1.640|
;;;79     	     	{
;;;80     		      uart_printf(" press key FUN (exit now)\n\r");
000270  e28f0064          ADR      r0,|L1.732|
000274  ebfffffe          BL       uart_printf
;;;81     		     	return;
;;;82     		    }
;;;83     		}
;;;84     		}
;;;85     	}
;;;86     //	uart_printf(" end.\n");
;;;87     }
000278  e8bd4008          POP      {r3,lr}
00027c  e12fff1e          BX       lr
                  |L1.640|
000280  e59f0020          LDR      r0,|L1.680|
000284  e5900000          LDR      r0,[r0,#0]            ;66  ; g_nKeyPress
000288  e59f1018          LDR      r1,|L1.680|
00028c  e5911000          LDR      r1,[r1,#0]            ;66  ; g_nKeyPress
000290  e2411001          SUB      r1,r1,#1              ;66
000294  e59f200c          LDR      r2,|L1.680|
000298  e3500000          CMP      r0,#0                 ;66
00029c  e5821000          STR      r1,[r2,#0]            ;66  ; g_nKeyPress
0002a0  1affffc8          BNE      |L1.456|
                  |L1.676|
0002a4  eaffffc6          B        |L1.452|
;;;88     
                          ENDP

                  |L1.680|
0002a8  00000000          DCD      g_nKeyPress
                  |L1.684|
0002ac  33fff000          DCD      0x33fff000
                  |L1.688|
0002b0  0a204b6579626f6172642054657374204578616d706c650a00        DCB      "\n Keyboard Test Example\n",0
0002c9  00                DCB      0
0002ca  00                DCB      0
0002cb  00                DCB      0
                  |L1.716|
0002cc  7072657373206b65792025630a00        DCB      "press key %c\n",0
0002da  00                DCB      0
0002db  00                DCB      0
                  |L1.732|
0002dc  207072657373206b65792046554e202865786974206e6f77290a0d00        DCB      " press key FUN (exit now)\n\r",0

                          AREA ||.data||, DATA, ALIGN=2

                  g_nKeyPress
000000  00000000          DCD      0x00000000
