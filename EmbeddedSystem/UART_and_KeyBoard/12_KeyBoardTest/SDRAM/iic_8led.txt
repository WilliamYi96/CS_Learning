; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 942] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\SDRAM\iic_8led.o --depend=.\SDRAM\iic_8led.d --device=DARMSS9 --apcs=interwork -O0 -I..\Common\Inc -I.\Include -ID:\Keil\ARM\INC\Samsung --omf_browse=.\SDRAM\iic_8led.crf iic_8led.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  iic_int_8led PROC
;;;160    void __irq  iic_int_8led(void)
;;;161    {
000000  e92d0003          PUSH     {r0,r1}
;;;162        ClearPending(BIT_IIC);
000004  e3a00302          MOV      r0,#0x8000000
000008  e3a0144a          MOV      r1,#0x4a000000
00000c  e5810000          STR      r0,[r1,#0]
000010  e3a0044a          MOV      r0,#0x4a000000
000014  e5900010          LDR      r0,[r0,#0x10]
000018  e5810010          STR      r0,[r1,#0x10]
;;;163    	f_nGetACK = 1;
00001c  e3a00001          MOV      r0,#1
000020  e59f1260          LDR      r1,|L1.648|
000024  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;164    }
000028  e8bd0003          POP      {r0,r1}
00002c  e25ef004          SUBS     pc,lr,#4
                          ENDP

                  iic_init_8led PROC
;;;39     {
;;;40     	f_nGetACK = 0;
000030  e3a00000          MOV      r0,#0
000034  e59f124c          LDR      r1,|L1.648|
000038  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;41     
;;;42         // Enable interrupt
;;;43     	rINTMOD = 0x0;
00003c  e3a0144a          MOV      r1,#0x4a000000
000040  e5810004          STR      r0,[r1,#4]
;;;44         rSRCPND = rSRCPND;                 // clear all interrupt
000044  e3a0044a          MOV      r0,#0x4a000000
000048  e5900000          LDR      r0,[r0,#0]
00004c  e5810000          STR      r0,[r1,#0]
;;;45         rINTPND = rINTPND;                 // clear all interrupt
000050  e3a0044a          MOV      r0,#0x4a000000
000054  e5900010          LDR      r0,[r0,#0x10]
000058  e5810010          STR      r0,[r1,#0x10]
;;;46     	rINTMSK &= ~BIT_IIC;
00005c  e3a0044a          MOV      r0,#0x4a000000
000060  e5900008          LDR      r0,[r0,#8]
000064  e3c00302          BIC      r0,r0,#0x8000000
000068  e5810008          STR      r0,[r1,#8]
;;;47         pISR_IIC= (unsigned)iic_int_8led;
00006c  e24f0074          ADR      r0,iic_int_8led
000070  e59f1214          LDR      r1,|L1.652|
000074  e5810f8c          STR      r0,[r1,#0xf8c]
;;;48     
;;;49     	// Initialize iic
;;;50     	rIICADD = 0x10;												// S3C2410X slave address 
000078  e3a00010          MOV      r0,#0x10
00007c  e3a01315          MOV      r1,#0x54000000
000080  e5810008          STR      r0,[r1,#8]
;;;51         rIICCON = 0xef;												// Enable ACK, interrupt, set IICCLK=MCLK/512
000084  e3a000ef          MOV      r0,#0xef
000088  e5810000          STR      r0,[r1,#0]
;;;52         rIICSTAT= 0x10;												// Enable TX/RX 
00008c  e3a00010          MOV      r0,#0x10
000090  e5810004          STR      r0,[r1,#4]
;;;53     }
000094  e12fff1e          BX       lr
;;;54     
                          ENDP

                  iic_write_8led PROC
;;;67     void iic_write_8led(UINT32T unSlaveAddr,UINT32T unAddr,UINT8T ucData)
;;;68     {
000098  e92d4070          PUSH     {r4-r6,lr}
00009c  e1a04000          MOV      r4,r0
0000a0  e1a05001          MOV      r5,r1
0000a4  e1a06002          MOV      r6,r2
;;;69     	f_nGetACK = 0;
0000a8  e3a00000          MOV      r0,#0
0000ac  e59f11d4          LDR      r1,|L1.648|
0000b0  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;70         
;;;71         // Send control byte
;;;72         rIICDS = unSlaveAddr;										// 0x70
0000b4  e3a00315          MOV      r0,#0x54000000
0000b8  e580400c          STR      r4,[r0,#0xc]
;;;73         rIICSTAT = 0xf0;											// Master Tx,Start
0000bc  e3a000f0          MOV      r0,#0xf0
0000c0  e3a01315          MOV      r1,#0x54000000
0000c4  e5810004          STR      r0,[r1,#4]
;;;74         while(f_nGetACK == 0);										// Wait ACK
0000c8  e1a00000          MOV      r0,r0
                  |L1.204|
0000cc  e59f01b4          LDR      r0,|L1.648|
0000d0  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
0000d4  e3500000          CMP      r0,#0
0000d8  0afffffb          BEQ      |L1.204|
;;;75         f_nGetACK = 0;
0000dc  e3a00000          MOV      r0,#0
0000e0  e59f11a0          LDR      r1,|L1.648|
0000e4  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;76         
;;;77         // Send address
;;;78         rIICDS = unAddr;
0000e8  e3a00315          MOV      r0,#0x54000000
0000ec  e580500c          STR      r5,[r0,#0xc]
;;;79         rIICCON = 0xef;												// Resumes IIC operation.
0000f0  e3a000ef          MOV      r0,#0xef
0000f4  e3a01315          MOV      r1,#0x54000000
0000f8  e5810000          STR      r0,[r1,#0]
;;;80     	while(f_nGetACK == 0);										// Wait ACK
0000fc  e1a00000          MOV      r0,r0
                  |L1.256|
000100  e59f0180          LDR      r0,|L1.648|
000104  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
000108  e3500000          CMP      r0,#0
00010c  0afffffb          BEQ      |L1.256|
;;;81         f_nGetACK = 0;
000110  e3a00000          MOV      r0,#0
000114  e59f116c          LDR      r1,|L1.648|
000118  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;82         
;;;83         // Send data
;;;84         rIICDS = ucData;
00011c  e3a00315          MOV      r0,#0x54000000
000120  e580600c          STR      r6,[r0,#0xc]
;;;85         rIICCON = 0xef;												// Resumes IIC operation.
000124  e3a000ef          MOV      r0,#0xef
000128  e3a01315          MOV      r1,#0x54000000
00012c  e5810000          STR      r0,[r1,#0]
;;;86         while(f_nGetACK == 0);										// Wait ACK
000130  e1a00000          MOV      r0,r0
                  |L1.308|
000134  e59f014c          LDR      r0,|L1.648|
000138  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
00013c  e3500000          CMP      r0,#0
000140  0afffffb          BEQ      |L1.308|
;;;87         f_nGetACK = 0;
000144  e3a00000          MOV      r0,#0
000148  e59f1138          LDR      r1,|L1.648|
00014c  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;88         
;;;89         // End send
;;;90         rIICSTAT = 0xd0;											// Stop Master Tx condition
000150  e3a000d0          MOV      r0,#0xd0
000154  e3a01315          MOV      r1,#0x54000000
000158  e5810004          STR      r0,[r1,#4]
;;;91         rIICCON = 0xef;												// Resumes IIC operation.
00015c  e3a000ef          MOV      r0,#0xef
000160  e5810000          STR      r0,[r1,#0]
;;;92         delay(5);													// Wait until stop condtion is in effect.
000164  e3a00005          MOV      r0,#5
000168  ebfffffe          BL       delay
;;;93     }
00016c  e8bd4070          POP      {r4-r6,lr}
000170  e12fff1e          BX       lr
;;;94     
                          ENDP

                  iic_read_8led PROC
;;;111    void iic_read_8led(UINT32T unSlaveAddr,UINT32T unAddr,UINT8T *pData)
;;;112    {
000174  e92d41f0          PUSH     {r4-r8,lr}
000178  e1a04000          MOV      r4,r0
00017c  e1a07001          MOV      r7,r1
000180  e1a05002          MOV      r5,r2
;;;113    	char cRecvByte;
;;;114    	
;;;115    	f_nGetACK = 0;
000184  e3a00000          MOV      r0,#0
000188  e59f10f8          LDR      r1,|L1.648|
00018c  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;116    
;;;117        // Send control byte 
;;;118        rIICDS = unSlaveAddr;										// Write slave address to IICDS
000190  e3a00315          MOV      r0,#0x54000000
000194  e580400c          STR      r4,[r0,#0xc]
;;;119        rIICSTAT = 0xf0;											// Master Tx,Start
000198  e3a000f0          MOV      r0,#0xf0
00019c  e3a01315          MOV      r1,#0x54000000
0001a0  e5810004          STR      r0,[r1,#4]
;;;120        while(f_nGetACK == 0);										// Wait ACK
0001a4  e1a00000          MOV      r0,r0
                  |L1.424|
0001a8  e59f00d8          LDR      r0,|L1.648|
0001ac  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
0001b0  e3500000          CMP      r0,#0
0001b4  0afffffb          BEQ      |L1.424|
;;;121        f_nGetACK = 0;
0001b8  e3a00000          MOV      r0,#0
0001bc  e59f10c4          LDR      r1,|L1.648|
0001c0  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;122    
;;;123        // Send address 
;;;124        rIICDS = unAddr;
0001c4  e3a00315          MOV      r0,#0x54000000
0001c8  e580700c          STR      r7,[r0,#0xc]
;;;125        rIICCON = 0xef;												// Resumes IIC operation.
0001cc  e3a000ef          MOV      r0,#0xef
0001d0  e3a01315          MOV      r1,#0x54000000
0001d4  e5810000          STR      r0,[r1,#0]
;;;126        while(f_nGetACK == 0);										// Wait ACK
0001d8  e1a00000          MOV      r0,r0
                  |L1.476|
0001dc  e59f00a4          LDR      r0,|L1.648|
0001e0  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
0001e4  e3500000          CMP      r0,#0
0001e8  0afffffb          BEQ      |L1.476|
;;;127        f_nGetACK = 0;
0001ec  e3a00000          MOV      r0,#0
0001f0  e59f1090          LDR      r1,|L1.648|
0001f4  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;128    
;;;129        // Send control byte
;;;130        rIICDS = unSlaveAddr;										// 0x70
0001f8  e3a00315          MOV      r0,#0x54000000
0001fc  e580400c          STR      r4,[r0,#0xc]
;;;131        rIICSTAT = 0xb0;											// Master Rx,Start
000200  e3a000b0          MOV      r0,#0xb0
000204  e3a01315          MOV      r1,#0x54000000
000208  e5810004          STR      r0,[r1,#4]
;;;132    	rIICCON = 0xef;												// Resumes IIC operation.   
00020c  e3a000ef          MOV      r0,#0xef
000210  e5810000          STR      r0,[r1,#0]
;;;133        while(f_nGetACK == 0);										// Wait ACK
000214  e1a00000          MOV      r0,r0
                  |L1.536|
000218  e59f0068          LDR      r0,|L1.648|
00021c  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
000220  e3500000          CMP      r0,#0
000224  0afffffb          BEQ      |L1.536|
;;;134        f_nGetACK = 0;
000228  e3a00000          MOV      r0,#0
00022c  e59f1054          LDR      r1,|L1.648|
000230  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;135        
;;;136        // Get data
;;;137        cRecvByte = rIICDS;
000234  e3a00315          MOV      r0,#0x54000000
000238  e590000c          LDR      r0,[r0,#0xc]
00023c  e20060ff          AND      r6,r0,#0xff
;;;138        rIICCON = 0x2f;
000240  e3a0002f          MOV      r0,#0x2f
000244  e3a01315          MOV      r1,#0x54000000
000248  e5810000          STR      r0,[r1,#0]
;;;139        delay(1);
00024c  e3a00001          MOV      r0,#1
000250  ebfffffe          BL       delay
;;;140        
;;;141        // Get data 
;;;142        cRecvByte = rIICDS;
000254  e3a00315          MOV      r0,#0x54000000
000258  e590000c          LDR      r0,[r0,#0xc]
00025c  e20060ff          AND      r6,r0,#0xff
;;;143        
;;;144        // End receive 
;;;145        rIICSTAT = 0x90;											// Stop Master Rx condition 
000260  e3a00090          MOV      r0,#0x90
000264  e3a01315          MOV      r1,#0x54000000
000268  e5810004          STR      r0,[r1,#4]
;;;146    	rIICCON = 0xef;												// Resumes IIC operation.
00026c  e3a000ef          MOV      r0,#0xef
000270  e5810000          STR      r0,[r1,#0]
;;;147    	delay(5);													// Wait until stop condtion is in effect.
000274  e3a00005          MOV      r0,#5
000278  ebfffffe          BL       delay
;;;148    	
;;;149        *pData = cRecvByte;
00027c  e5c56000          STRB     r6,[r5,#0]
;;;150    }
000280  e8bd41f0          POP      {r4-r8,lr}
000284  e12fff1e          BX       lr
;;;151    
                          ENDP

                  |L1.648|
000288  00000000          DCD      f_nGetACK
                  |L1.652|
00028c  33fff000          DCD      0x33fff000

                          AREA ||.data||, DATA, ALIGN=2

                  f_nGetACK
000000  00000000          DCD      0x00000000
