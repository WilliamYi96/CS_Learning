; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 942] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\SDRAM\iic_keybd.o --depend=.\SDRAM\iic_keybd.d --device=DARMSS9 --apcs=interwork -O0 -I..\Common\Inc -I.\Include -ID:\Keil\ARM\INC\Samsung --omf_browse=.\SDRAM\iic_keybd.crf iic_keybd.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  iic_int_keybd PROC
;;;150    void __irq iic_int_keybd(void)
;;;151    {
000000  e92d0003          PUSH     {r0,r1}
;;;152        ClearPending(BIT_IIC);
000004  e3a00302          MOV      r0,#0x8000000
000008  e3a0144a          MOV      r1,#0x4a000000
00000c  e5810000          STR      r0,[r1,#0]
000010  e3a0044a          MOV      r0,#0x4a000000
000014  e5900010          LDR      r0,[r0,#0x10]
000018  e5810010          STR      r0,[r1,#0x10]
;;;153    	f_nGetACK = 1;
00001c  e3a00001          MOV      r0,#1
000020  e59f125c          LDR      r1,|L1.644|
000024  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;154    }
000028  e8bd0003          POP      {r0,r1}
00002c  e25ef004          SUBS     pc,lr,#4
                          ENDP

                  iic_init_keybd PROC
;;;37     {
;;;38     	f_nGetACK = 0;
000030  e3a00000          MOV      r0,#0
000034  e59f1248          LDR      r1,|L1.644|
000038  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;39     
;;;40         // Enable interrupt
;;;41     	rINTMOD = 0x0;
00003c  e3a0144a          MOV      r1,#0x4a000000
000040  e5810004          STR      r0,[r1,#4]
;;;42         rSRCPND = rSRCPND;                 // clear all interrupt
000044  e3a0044a          MOV      r0,#0x4a000000
000048  e5900000          LDR      r0,[r0,#0]
00004c  e5810000          STR      r0,[r1,#0]
;;;43         rINTPND = rINTPND;                 // clear all interrupt
000050  e3a0044a          MOV      r0,#0x4a000000
000054  e5900010          LDR      r0,[r0,#0x10]
000058  e5810010          STR      r0,[r1,#0x10]
;;;44     	rINTMSK &= ~(BIT_IIC|BIT_EINT1);
00005c  e3a0044a          MOV      r0,#0x4a000000
000060  e5900008          LDR      r0,[r0,#8]
000064  e3c00382          BIC      r0,r0,#0x8000002
000068  e5810008          STR      r0,[r1,#8]
;;;45         pISR_IIC= (unsigned)iic_int_keybd;
00006c  e24f0074          ADR      r0,iic_int_keybd
000070  e59f1210          LDR      r1,|L1.648|
000074  e5810f8c          STR      r0,[r1,#0xf8c]
;;;46     
;;;47     	// Initialize iic
;;;48     	rIICADD = 0x10;												// S3C2410X slave address 
000078  e3a00010          MOV      r0,#0x10
00007c  e3a01315          MOV      r1,#0x54000000
000080  e5810008          STR      r0,[r1,#8]
;;;49         rIICCON = 0xaf;												// Enable ACK, interrupt, set IICCLK=MCLK/16
000084  e3a000af          MOV      r0,#0xaf
000088  e5810000          STR      r0,[r1,#0]
;;;50         rIICSTAT= 0x10;												// Enable TX/RX 
00008c  e3a00010          MOV      r0,#0x10
000090  e5810004          STR      r0,[r1,#4]
;;;51     }
000094  e12fff1e          BX       lr
;;;52     
                          ENDP

                  iic_write_keybd PROC
;;;64     {
;;;65     	f_nGetACK = 0;
000098  e3a03000          MOV      r3,#0
00009c  e59fc1e0          LDR      r12,|L1.644|
0000a0  e58c3000          STR      r3,[r12,#0]  ; f_nGetACK
;;;66         
;;;67         // Send control byte
;;;68         rIICDS = unSlaveAddr;										// 0x70
0000a4  e3a03315          MOV      r3,#0x54000000
0000a8  e583000c          STR      r0,[r3,#0xc]
;;;69         rIICSTAT = 0xf0;											// Master Tx,Start
0000ac  e3a030f0          MOV      r3,#0xf0
0000b0  e3a0c315          MOV      r12,#0x54000000
0000b4  e58c3004          STR      r3,[r12,#4]
;;;70         while(f_nGetACK == 0);										// Wait ACK
0000b8  e1a00000          MOV      r0,r0
                  |L1.188|
0000bc  e59f31c0          LDR      r3,|L1.644|
0000c0  e5933000          LDR      r3,[r3,#0]  ; f_nGetACK
0000c4  e3530000          CMP      r3,#0
0000c8  0afffffb          BEQ      |L1.188|
;;;71         f_nGetACK = 0;
0000cc  e3a03000          MOV      r3,#0
0000d0  e59fc1ac          LDR      r12,|L1.644|
0000d4  e58c3000          STR      r3,[r12,#0]  ; f_nGetACK
;;;72         
;;;73         // Send address
;;;74         rIICDS = unAddr;
0000d8  e3a03315          MOV      r3,#0x54000000
0000dc  e583100c          STR      r1,[r3,#0xc]
;;;75         rIICCON = 0xaf;												// Resumes IIC operation.
0000e0  e3a030af          MOV      r3,#0xaf
0000e4  e3a0c315          MOV      r12,#0x54000000
0000e8  e58c3000          STR      r3,[r12,#0]
;;;76     	while(f_nGetACK == 0);										// Wait ACK
0000ec  e1a00000          MOV      r0,r0
                  |L1.240|
0000f0  e59f318c          LDR      r3,|L1.644|
0000f4  e5933000          LDR      r3,[r3,#0]  ; f_nGetACK
0000f8  e3530000          CMP      r3,#0
0000fc  0afffffb          BEQ      |L1.240|
;;;77         f_nGetACK = 0;
000100  e3a03000          MOV      r3,#0
000104  e59fc178          LDR      r12,|L1.644|
000108  e58c3000          STR      r3,[r12,#0]  ; f_nGetACK
;;;78         
;;;79         // Send data
;;;80         rIICDS = ucData;
00010c  e3a03315          MOV      r3,#0x54000000
000110  e583200c          STR      r2,[r3,#0xc]
;;;81         rIICCON = 0xaf;												// Resumes IIC operation.
000114  e3a030af          MOV      r3,#0xaf
000118  e3a0c315          MOV      r12,#0x54000000
00011c  e58c3000          STR      r3,[r12,#0]
;;;82         while(f_nGetACK == 0);										// Wait ACK
000120  e1a00000          MOV      r0,r0
                  |L1.292|
000124  e59f3158          LDR      r3,|L1.644|
000128  e5933000          LDR      r3,[r3,#0]  ; f_nGetACK
00012c  e3530000          CMP      r3,#0
000130  0afffffb          BEQ      |L1.292|
;;;83         f_nGetACK = 0;
000134  e3a03000          MOV      r3,#0
000138  e59fc144          LDR      r12,|L1.644|
00013c  e58c3000          STR      r3,[r12,#0]  ; f_nGetACK
;;;84         
;;;85         // End send
;;;86         rIICSTAT = 0xd0;											// Stop Master Tx condition
000140  e3a030d0          MOV      r3,#0xd0
000144  e3a0c315          MOV      r12,#0x54000000
000148  e58c3004          STR      r3,[r12,#4]
;;;87         rIICCON = 0xaf;												// Resumes IIC operation.
00014c  e3a030af          MOV      r3,#0xaf
000150  e58c3000          STR      r3,[r12,#0]
;;;88     	while(rIICSTAT & 0x20 == 1);								// Wait until stop condtion is in effect.
000154  e1a00000          MOV      r0,r0
                  |L1.344|
000158  e3a03315          MOV      r3,#0x54000000
00015c  e5933004          LDR      r3,[r3,#4]
000160  e3a03000          MOV      r3,#0
000164  e3530000          CMP      r3,#0
000168  1afffffa          BNE      |L1.344|
;;;89     }
00016c  e12fff1e          BX       lr
;;;90     	
                          ENDP

                  iic_read_keybd PROC
;;;101    void iic_read_keybd(UINT32T unSlaveAddr,UINT32T unAddr,UINT8T *pData)
;;;102    {
000170  e92d41f0          PUSH     {r4-r8,lr}
000174  e1a04000          MOV      r4,r0
000178  e1a07001          MOV      r7,r1
00017c  e1a05002          MOV      r5,r2
;;;103    	char cRecvByte;
;;;104    	
;;;105    	f_nGetACK = 0;
000180  e3a00000          MOV      r0,#0
000184  e59f10f8          LDR      r1,|L1.644|
000188  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;106    
;;;107        // Send control byte 
;;;108        rIICDS = unSlaveAddr;										// Write slave address to IICDS
00018c  e3a00315          MOV      r0,#0x54000000
000190  e580400c          STR      r4,[r0,#0xc]
;;;109        rIICSTAT = 0xf0;											// Master Tx,Start
000194  e3a000f0          MOV      r0,#0xf0
000198  e3a01315          MOV      r1,#0x54000000
00019c  e5810004          STR      r0,[r1,#4]
;;;110        while(f_nGetACK == 0);										// Wait ACK
0001a0  e1a00000          MOV      r0,r0
                  |L1.420|
0001a4  e59f00d8          LDR      r0,|L1.644|
0001a8  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
0001ac  e3500000          CMP      r0,#0
0001b0  0afffffb          BEQ      |L1.420|
;;;111        f_nGetACK = 0;
0001b4  e3a00000          MOV      r0,#0
0001b8  e59f10c4          LDR      r1,|L1.644|
0001bc  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;112    
;;;113        // Send address 
;;;114        rIICDS = unAddr;
0001c0  e3a00315          MOV      r0,#0x54000000
0001c4  e580700c          STR      r7,[r0,#0xc]
;;;115        rIICCON = 0xaf;												// Resumes IIC operation.
0001c8  e3a000af          MOV      r0,#0xaf
0001cc  e3a01315          MOV      r1,#0x54000000
0001d0  e5810000          STR      r0,[r1,#0]
;;;116        while(f_nGetACK == 0);										// Wait ACK
0001d4  e1a00000          MOV      r0,r0
                  |L1.472|
0001d8  e59f00a4          LDR      r0,|L1.644|
0001dc  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
0001e0  e3500000          CMP      r0,#0
0001e4  0afffffb          BEQ      |L1.472|
;;;117        f_nGetACK = 0;
0001e8  e3a00000          MOV      r0,#0
0001ec  e59f1090          LDR      r1,|L1.644|
0001f0  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;118    
;;;119        // Send control byte
;;;120        rIICDS = unSlaveAddr;										// 0x70
0001f4  e3a00315          MOV      r0,#0x54000000
0001f8  e580400c          STR      r4,[r0,#0xc]
;;;121        rIICSTAT = 0xb0;											// Master Rx,Start
0001fc  e3a000b0          MOV      r0,#0xb0
000200  e3a01315          MOV      r1,#0x54000000
000204  e5810004          STR      r0,[r1,#4]
;;;122    	rIICCON = 0xaf;												// Resumes IIC operation.   
000208  e3a000af          MOV      r0,#0xaf
00020c  e5810000          STR      r0,[r1,#0]
;;;123        while(f_nGetACK == 0);										// Wait ACK
000210  e1a00000          MOV      r0,r0
                  |L1.532|
000214  e59f0068          LDR      r0,|L1.644|
000218  e5900000          LDR      r0,[r0,#0]  ; f_nGetACK
00021c  e3500000          CMP      r0,#0
000220  0afffffb          BEQ      |L1.532|
;;;124        f_nGetACK = 0;
000224  e3a00000          MOV      r0,#0
000228  e59f1054          LDR      r1,|L1.644|
00022c  e5810000          STR      r0,[r1,#0]  ; f_nGetACK
;;;125        
;;;126        // Get data
;;;127        cRecvByte = rIICDS;
000230  e3a00315          MOV      r0,#0x54000000
000234  e590000c          LDR      r0,[r0,#0xc]
000238  e20060ff          AND      r6,r0,#0xff
;;;128        rIICCON = 0x2f;
00023c  e3a0002f          MOV      r0,#0x2f
000240  e3a01315          MOV      r1,#0x54000000
000244  e5810000          STR      r0,[r1,#0]
;;;129        delay(1);
000248  e3a00001          MOV      r0,#1
00024c  ebfffffe          BL       delay
;;;130        
;;;131        // Get data 
;;;132        cRecvByte = rIICDS;
000250  e3a00315          MOV      r0,#0x54000000
000254  e590000c          LDR      r0,[r0,#0xc]
000258  e20060ff          AND      r6,r0,#0xff
;;;133        
;;;134        // End receive 
;;;135        rIICSTAT = 0x90;											// Stop Master Rx condition 
00025c  e3a00090          MOV      r0,#0x90
000260  e3a01315          MOV      r1,#0x54000000
000264  e5810004          STR      r0,[r1,#4]
;;;136    	rIICCON = 0xaf;												// Resumes IIC operation.
000268  e3a000af          MOV      r0,#0xaf
00026c  e5810000          STR      r0,[r1,#0]
;;;137    	delay(5);													// Wait until stop condtion is in effect.
000270  e3a00005          MOV      r0,#5
000274  ebfffffe          BL       delay
;;;138    	
;;;139        *pData = cRecvByte;
000278  e5c56000          STRB     r6,[r5,#0]
;;;140    }
00027c  e8bd41f0          POP      {r4-r8,lr}
000280  e12fff1e          BX       lr
;;;141    
                          ENDP

                  |L1.644|
000284  00000000          DCD      f_nGetACK
                  |L1.648|
000288  33fff000          DCD      0x33fff000
